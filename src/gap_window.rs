use ndarray::Array1;
#[derive(Debug, Clone, Copy)]
pub struct GAPWin([f64; 11]);

impl GAPWin
{
    pub fn window(&self, length : usize) -> Array1<f64>
    {
        let div = 1. / (length - 1) as f64;
        let mut N = Array1::from_vec((0..length).map(|x| x as f64 * div).collect());
        let std = 1. / N.std(0.);
        let mean = 0.5 * std;
        N.iter_mut().for_each(|n| {
            let x = *n * std - mean;
            let x2 = x * x;
            let x4 = x2 * x2;
            let x6 = x4 * x2;
            let x8 = x4 * x4;
            let (x10, x12, x14, x16) = (x2 * x8, x4 * x8, x6 * x8, x8 * x8);
            let (x18, x20) = (x10 * x8, x12 * x8);
            *n = self.0[0]
                + self.0[1] * x2
                + self.0[2] * x4
                + self.0[3] * x6
                + self.0[4] * x8
                + self.0[5] * x10
                + self.0[6] * x12
                + self.0[7] * x14
                + self.0[8] * x16
                + self.0[9] * x18
                + self.0[10] * x20;
        });
        N
    }
    pub fn integrated_window(&self, length : usize, order : usize) -> Array1<f64>
    {
        let div = 1. / (length - 1) as f64;
        let mut N = Array1::from_vec((0..length).map(|x| x as f64 * div).collect());
        let std = 1. / N.std(0.);
        let mean = 0.5 * std;
        let mut wcoef = self.clone();
        (1..=order).into_iter().for_each(|i| {
            (0..11)
                .into_iter()
                .for_each(|j| wcoef.0[j] /= (j + i) as f64)
        });
        N.iter_mut().for_each(|n| {
            let x = *n * std - mean;
            let x2 = x * x;
            let x4 = x2 * x2;
            let x6 = x4 * x2;
            let x8 = x4 * x4;
            let (x10, x12, x14, x16) = (x2 * x8, x4 * x8, x6 * x8, x8 * x8);
            let (x18, x20) = (x10 * x8, x12 * x8);
            *n = wcoef.0[0]
                + wcoef.0[1] * x2
                + wcoef.0[2] * x4
                + wcoef.0[3] * x6
                + wcoef.0[4] * x8
                + wcoef.0[5] * x10
                + wcoef.0[6] * x12
                + wcoef.0[7] * x14
                + wcoef.0[8] * x16
                + wcoef.0[9] * x18
                + wcoef.0[10] * x20;
            *n *= x.powi(order as i32);
        });
        N
    }
}

//consts
#[allow(dead_code)]
impl GAPWin
{
    ///Cosine fraction equal to 0.5
    pub const TUKEY : Self = Self([
        1.,
        -0.0103497038211383,
        0.3959586687207592,
        -3.2945315992929736,
        10.9266194171836390,
        -17.7404182084630830,
        15.6301946042598950,
        -7.9870271991602984,
        2.3794414907511503,
        -0.3845839556124955,
        0.0261098161259766,
    ]);
    pub const BOHMAN : Self = Self([
        1.,
        -1.5605823828760355,
        1.7148495655943015,
        -2.5618825249800583,
        3.6271291873571676,
        -3.5950261254540017,
        2.3505926003045694,
        -0.9933942437949487,
        0.2606623922569933,
        -0.0385661195398123,
        0.0024568662420631,
    ]);
    ///Width factor equal to 2.5
    pub const GAUSS : Self = Self([
        1.,
        -1.0467106610988055,
        0.5361462724137202,
        -0.1387143360480971,
        -0.0584915293187281,
        0.1162559013242074,
        -0.0877208431082394,
        0.0387600530521579,
        -0.0102232327498813,
        0.0014864383817216,
        -0.0000916508663761,
    ]);
    pub const NUTTALL : Self = Self([
        1.,
        -1.8613291764674220,
        1.5955186857618950,
        -0.8406138435144469,
        0.3060221557499289,
        -0.0816143503577229,
        0.0163658050094003,
        -0.0024762422139338,
        0.0002763640540836,
        -0.0000208137088649,
        0.0000007971348851,
    ]);
    pub const BLACKMANHARRIS : Self = Self([
        1.,
        -1.9071140664126667,
        1.6688485572798146,
        -0.8949809748378396,
        0.3314095987979339,
        -0.0905472023090353,
        0.0191638805426608,
        -0.0032874219959794,
        0.0004607672130969,
        -0.0000468683311108,
        0.0000024315535428,
    ]);
    pub const HAMMING : Self = Self([
        1.,
        -0.7568070383868444,
        0.2075050626134147,
        -0.0226856435429735,
        0.0011638432390271,
        0.0001756748203687,
        -0.0001739434252335,
        0.0000839988209135,
        -0.0000242454753949,
        0.0000038606906746,
        -0.0000002606048812,
    ]);
    pub const HANN : Self = Self([
        1.,
        -0.8236640350672578,
        0.2396934226088473,
        -0.0910329438155984,
        0.1546641760773942,
        -0.2008340012917025,
        0.1591065890832292,
        -0.0777111572266440,
        0.0228723527427099,
        -0.0037192072905112,
        0.0002565996927828,
    ]);
    pub const BLACKMAN : Self = Self([
        1.,
        -1.3499977224496962,
        0.8164359980905906,
        -0.3451854568136762,
        0.2234156466000141,
        -0.2292817284031708,
        0.1806093772823897,
        -0.0898992834622714,
        0.0269592184647446,
        -0.0044557612857286,
        0.0003117737791971,
    ]);
    pub const FLATTOP : Self = Self([
        1.,
        -3.9305156873118765,
        6.0451104178491635,
        -5.3177562066489958,
        3.1144383119449035,
        -1.3100052464220604,
        0.4090358342129138,
        -0.0944033497312810,
        0.0153559618717567,
        -0.0015700027700864,
        0.0000753819065601,
    ]);
    ///beta = 2.5
    pub const KAISER_2P5 : Self = Self([
        1.,
        -0.3189794414953419,
        0.0336993294780022,
        -0.0016224639429582,
        -0.0001697167227210,
        0.0002229717468906,
        -0.0001265960227273,
        0.0000382544342193,
        -0.0000046936529421,
        -0.0000002431170153,
        0.0000000819885591,
    ]);
    pub const OPT_GAP_FLATTOP : Self = Self([
        1.,
        -4.1209325608590230,
        6.6399343002408848,
        -6.1201388282223714,
        3.7564788283482500,
        -1.6562551742477343,
        0.5422907505270711,
        -0.1313358672391922,
        0.0224356650617897,
        -0.0024099466150896,
        0.0001215684885852,
    ]);
    pub const OPT_GAP_HANN : Self = Self([
        1.,
        -0.8633709192318678,
        0.2653709029689753,
        -0.1153016793571805,
        0.2116532335332943,
        -0.2872184753966414,
        0.2374771961834025,
        -0.1207452486142054,
        0.0369718127902219,
        -0.0062356588610486,
        0.0004470315321743,
    ]);
    pub const OPT_GAP_NUTTALL : Self = Self([
        1.,
        -1.9501232504232442,
        1.7516390954528638,
        -0.9651321809782892,
        0.3629219021312954,
        -0.0943163918335154,
        0.0140434805881681,
        0.0006383045745587,
        -0.0009075461792061,
        0.0002000671118688,
        -0.0000161042445001,
    ]);
    pub const OPT_GAP_TUKEY : Self = Self([
        1.,
        -0.0342729483485263,
        0.6073488292493461,
        -5.4139206165072489,
        15.2509414561383778,
        -24.0795939653486499,
        21.9939520044024128,
        -11.7824123554208455,
        3.6751885048648951,
        -0.6242323583760374,
        0.0451786553861468,
    ]);
    pub const KAISER_17_OPT : Self = Self([
        1.,
        -2.88096038290137,
        3.90571375345249,
        -3.32142344170956,
        1.98908583203511,
        -0.887799204462637,
        0.301313774487065,
        -0.0765903495882955,
        0.0137715274952230,
        -0.00155107533882355,
        8.14470373567413e-05,
    ]);
}
